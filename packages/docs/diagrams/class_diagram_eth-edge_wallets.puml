@startuml
enum CurrencyType {
    ETHEREUM
    BITCOIN
}
interface CreateWalletRequest extends InferType
class ContactAddress {
    +walletAddress: string
    +contacts?: Contact[]
}
class Contact {
    +contactName: string
    +userId: number
    +user?: User
    +addresses: ContactAddress[]
}
class ContactBuilder {
    -contactName: string
    -userId: number
    -addresses: string[]
    +setContactName(name: string): this
    +setUserId(userId: number): this
    +setAddresses(addresses: string[]): this
    +build(): Contact
}
class Transaction {
    +id: number
    +transactionAddress: string
    +walletIn: string
    +contactIn: Contact
    +walletOut: string
    +contactOut: Contact
    +amount: string
    +gasPrice: string
    +gasLimit: string
    +createdAt: Date
    +tags: Tag[]
}
class Tag {
    +tagName: string
    +userId: number
    +user: User
    +transactions: Transaction[]
}
enum Role {
    BASIC
    PRO
}
class User {
    +id: number
    +firstName: string
    +lastName: string
    +email: string
    +password: string
    +areNotificationsEnabled: boolean
    +role: Role
    +createdAt: Date
    +wallets: Wallet[]
    +tags: Tag[]
    +contacts: Contact[]
}
class Wallet {
    +address: string
    +userId: number
    +name: string
    +user: User
    +currencyType: CurrencyType
    +transactions: Transaction[]
}
class AlchemyDecorator {
    -delegate: Alchemy
    -configService: ConfigService<Record<string, unknown>, false>
    +getBalance(address: string): Promise<BigNumber>
    +getAssetTransfers(params: AssetTransfersWithMetadataParams): Promise<AssetTransfersWithMetadataResponse>
    +getTransaction(hash: string): Promise<TransactionResponse>
}
class AlchemyNodeServiceFacade {
    -alchemy: AlchemyDecorator
    +getBalance(address: string): Promise<string>
    +getTransactions(wallet: string): Promise<Transaction[]>
}
interface WalletWithBalance extends Wallet {
    +balance: string
}
abstract class AbstractNotificationStrategy {
    +{abstract} sendNotification(notification: Notification): Promise<void>
}
interface Notification {
    +to: string
    +title: string
    +body: string
    +attachment?: { filename: string; content: string; }
}
class EmailNotificationStrategy extends AbstractNotificationStrategy {
    -transporter: nodemailer.Transporter
    -from: string
    -configService: ConfigService<Record<string, unknown>, false>
    +sendNotification(notification: Notification): Promise<void>
}
class NotificationStrategyFactory {
    -emailNotificationStrategy: EmailNotificationStrategy
    +get(strategy: NotificationStrategy): AbstractNotificationStrategy
}
enum NotificationStrategy {
    EMAIL
    PUSH_NOTIFICATION
}
class TransactionNotificationService {
    -walletsRepository: Repository<Wallet>
    -notificationStrategyFactory: NotificationStrategyFactory
    +sendTransactionNotifications(transactions: Transaction[], currencyType: CurrencyType): Promise<void>
    -getBody(key: "walletOut" | "walletIn", wallet: Wallet, transaction: Transaction, currencyType: CurrencyType): string
    -getTitle(key: "walletOut" | "walletIn", currencyType: CurrencyType): string
    -{static} keys: readonly ["walletOut", "walletIn"]
}
class TransactionsService {
    -transactionsRepository: Repository<Transaction>
    -alchemyNodeServiceFacade: AlchemyNodeServiceFacade
    -walletsService: WalletsService
    -walletsRepository: Repository<Wallet>
    -transactionNotificationService: TransactionNotificationService
    +backfillTransactions(address: string): Promise<void>
    +handleAddressActivityEvent(addressActivityEvent: AddressActivityEvent): Promise<void>
    +findAll(userId: number): Promise<Transaction[]>
    +cleanup(address: string): Promise<Transaction[]>
}
abstract class AbstractGateway {
    -uri: string
    -fetch: any
    #request(method: Method, headers: Headers, path: string, body: any): Promise<T>
    #{abstract} handleError(response: any): Promise<void>
}
enum Method {
    POST
    GET
    PUT
    PATCH
    DELETE
}
class HttpError extends Error {
    +message: string
    +status: number
}
abstract class AbstractServiceGateway extends AbstractGateway {
    #handleError(response: any): Promise<void>
}
class AlchemyNodeGateway extends AbstractServiceGateway {
    -configService: ConfigService<Record<string, unknown>, false>
    +updateWebhookAddresses(addressesToAdd: string[], addressesToRemove: string[]): Promise<void>
}
interface DeleteWalletRequest extends InferType
class WalletsService {
    -walletRepository: Repository<Wallet>
    -alchemyNodeServiceFacade: AlchemyNodeServiceFacade
    -transactionsService: TransactionsService
    -alchemyNodeGateway: AlchemyNodeGateway
    +create(createWalletReq: CreateWalletRequest): Promise<WalletWithBalance>
    +findOne(address: string, userId: number): Promise<Wallet>
    +findAll(userId: number): Promise<WalletWithBalance[]>
    +delete(deleteWalletReq: DeleteWalletRequest): Promise<WalletWithBalance>
}
interface GetWalletsRequest extends InferType
class WalletsController {
    -walletsService: WalletsService
    +create(body: CreateWalletRequest): Promise<WalletWithBalance>
    +findAll(params: GetWalletsRequest): Promise<WalletWithBalance[]>
    +delete(params: DeleteWalletRequest): Promise<WalletWithBalance>
}
ContactAddress --> "*" Contact
Contact --> "1" User
Contact --> "*" ContactAddress
ContactBuilder --> "1" Contact
Transaction --> "1" Contact
Transaction --> "*" Tag
Tag --> "1" User
Tag --> "*" Transaction
User --> "1" Role
User --> "*" Wallet
User --> "*" Tag
User --> "*" Contact
Wallet --> "1" User
Wallet --> "1" CurrencyType
Wallet --> "*" Transaction
AlchemyNodeServiceFacade --> "1" AlchemyDecorator
AlchemyNodeServiceFacade --> "*" Transaction
AbstractNotificationStrategy --> "1" Notification
EmailNotificationStrategy --> "1" Notification
NotificationStrategyFactory --> "1" EmailNotificationStrategy
NotificationStrategyFactory --> "1" NotificationStrategy
NotificationStrategyFactory --> "1" AbstractNotificationStrategy
TransactionNotificationService --> "1" Wallet
TransactionNotificationService --> "1" NotificationStrategyFactory
TransactionNotificationService --> "1" Transaction
TransactionNotificationService --> "1" CurrencyType
TransactionsService --> "1" Transaction
TransactionsService --> "1" AlchemyNodeServiceFacade
TransactionsService --> "1" WalletsService
TransactionsService --> "1" Wallet
TransactionsService --> "1" TransactionNotificationService
TransactionsService --> "*" Transaction
AbstractGateway --> "1" Method
WalletsService --> "1" Wallet
WalletsService --> "1" AlchemyNodeServiceFacade
WalletsService --> "1" TransactionsService
WalletsService --> "1" AlchemyNodeGateway
WalletsService --> "1" CreateWalletRequest
WalletsService --> "1" WalletWithBalance
WalletsService --> "*" WalletWithBalance
WalletsService --> "1" DeleteWalletRequest
WalletsController --> "1" WalletsService
WalletsController --> "1" CreateWalletRequest
WalletsController --> "1" WalletWithBalance
WalletsController --> "1" GetWalletsRequest
WalletsController --> "*" WalletWithBalance
WalletsController --> "1" DeleteWalletRequest
@enduml