@startuml
enum CurrencyType {
    ETHEREUM
    BITCOIN
}
class Wallet {
    +address: string
    +userId: number
    +name: string
    +user: User
    +currencyType: CurrencyType
    +transactions: Transaction[]
}
class Contact {
    +walletAddress: string
    +userId: number
    +user: User
    +contactName: string
}
class User {
    +id: number
    +firstName: string
    +lastName: string
    +email: string
    +password: string
    +areNotificationsEnabled: boolean
    +createdAt: Date
    +wallets: Wallet[]
    +tags: Tag[]
    +contacts: Contact[]
}
class Tag {
    +tagName: string
    +userId: number
    +user: User
    +transactions: Transaction[]
}
class Transaction {
    +id: number
    +transactionAddress: string
    +walletIn: string
    +contactIn: Contact
    +walletOut: string
    +contactOut: Contact
    +amount: string
    +createdAt: Date
    +tags: Tag[]
}
interface CreateWalletRequest extends InferType
interface WalletWithBalance extends Wallet {
    +balance: string
}
abstract class AbstractNotificationStrategy {
    +{abstract} sendNotification(notification: Notification): Promise<void>
}
interface Notification {
    +to: string
    +title: string
    +body: string
    +attachment?: { filename: string; content: string; }
}
class EmailNotificationStrategy extends AbstractNotificationStrategy {
    -transporter: nodemailer.Transporter
    -from: string
    -configService: ConfigService<Record<string, unknown>, false>
    +sendNotification(notification: Notification): Promise<void>
}
class NotificationStrategyFactory {
    -emailNotificationStrategy: EmailNotificationStrategy
    +get(strategy: NotificationStrategy): AbstractNotificationStrategy
}
enum NotificationStrategy {
    EMAIL
    PUSH_NOTIFICATION
}
class TransactionNotificationService {
    -walletsRepository: Repository<Wallet>
    -notificationStrategyFactory: NotificationStrategyFactory
    +sendTransactionNotifications(transactions: Transaction[], currencyType: CurrencyType): Promise<void>
    -getBody(key: "walletOut" | "walletIn", wallet: Wallet, transaction: Transaction, currencyType: CurrencyType): string
    -getTitle(key: "walletOut" | "walletIn", currencyType: CurrencyType): string
    -{static} keys: readonly ["walletOut", "walletIn"]
}
abstract class AbstractGateway {
    -uri: string
    -fetch: any
    #request(method: Method, headers: Headers, path: string, body: any): Promise<T>
    #{abstract} handleError(response: any): Promise<void>
}
enum Method {
    POST
    GET
    PUT
    PATCH
    DELETE
}
class HttpError extends Error {
    +message: string
    +status: number
}
abstract class AbstractServiceGateway extends AbstractGateway {
    #handleError(response: any): Promise<void>
}
class BlockchainComGateway extends AbstractServiceGateway {
    -configService: ConfigService<Record<string, unknown>, false>
    -transactionsRepository: Repository<Transaction>
    +getBalance(walletAddress: string): Promise<string>
    +getTransactions(walletAddress: string): Promise<Transaction[]>
    +getTransactionsByTxAddress(txAddress: string): Promise<Transaction[]>
    -reversePoolMIMOTransaction(inputs: Out[], outputs: Out[]): PairsWithAmount
    -{static} DECIMALS: number
}
interface BalanceResponse {
    +final_balance: number
    +n_tx: number
    +total_received: number
}
interface TransactionsResponse {
    +address: string
    +n_tx: number
    +total_received: number
    +total_sent: number
    +final_balance: number
    +txs: Tx[]
}
interface TransactionResponse {
    +hash: string
    +ver: number
    +vin_sz: number
    +vout_sz: number
    +size: number
    +weight: number
    +fee: number
    +relayed_by: string
    +lock_time: number
    +tx_index: number
    +double_spend: boolean
    +time: number
    +block_index: number
    +block_height: number
    +inputs: Input[]
    +out: Out[]
}
interface Tx {
    +hash: string
    +ver: number
    +vin_sz: number
    +vout_sz: number
    +size: number
    +weight: number
    +fee: number
    +lock_time: number
    +tx_index: number
    +double_spend: boolean
    +time: number
    +block_index: number
    +block_height: number
    +inputs: Input[]
    +out: Out[]
    +result: number
    +balance: number
}
interface Input {
    +sequence: number
    +witness: string
    +script: string
    +index: number
    +prev_out: Out
}
interface Out {
    +addr: string
    +n: number
    +script: string
    +spending_outpoints: SpendingOutpoint[]
    +spent: boolean
    +tx_index: number
    +type: number
    +value: number
}
interface SpendingOutpoint {
    +n: number
    +tx_index: number
}
class TransactionWatcherService {
    -ws: WebSocketClient
    -walletsRepository: Repository<Wallet>
    -transactionsRepository: Repository<Transaction>
    -blockchainComGateway: BlockchainComGateway
    -transactionNotificationService: TransactionNotificationService
    #open(): Promise<void>
    #message(data: WebSocketClient.Data): Promise<void>
    +subscribeAddress(address: string): Promise<void>
    +unsubscribeAddress(address: string): Promise<void>
}
interface WSMessage {
    +op: string
}
interface WSTransaction extends WSMessage {
    +x: { lock_time: number; ver: number; size: number; inputs: Input[]; time: number; tx_index: number; vin_sz: number; hash: string; vout_sz: number; relayed_by: string; out: Out[]; }
}
interface Input {
    +sequence: number
    +prev_out: { spent: boolean; tx_index: number; type: number; addr: string; value: number; n: number; script: string; }
    +script: string
}
interface Out {
    +spent: boolean
    +tx_index: number
    +type: number
    +addr: string
    +value: number
    +n: number
    +script: string
}
interface DeleteWalletRequest extends InferType
class WalletsService {
    -walletRepository: Repository<Wallet>
    -transactionsService: TransactionsService
    -blockchainComGateway: BlockchainComGateway
    -transactionWatcherService: TransactionWatcherService
    +create(createWalletReq: CreateWalletRequest): Promise<WalletWithBalance>
    +findAll(userId: number): Promise<WalletWithBalance[]>
    +findOne(address: string, userId: number): Promise<Wallet>
    +delete(deleteWalletReq: DeleteWalletRequest): Promise<WalletWithBalance>
}
class TransactionsService {
    -transactionsRepository: Repository<Transaction>
    -blockchainComGateway: BlockchainComGateway
    -walletsService: WalletsService
    -walletsRepository: Repository<Wallet>
    +backfillTransactions(address: string): Promise<void>
    +findAll(userId: number): Promise<Transaction[]>
    +cleanup(address: string): Promise<Transaction[]>
}
interface GetTransactionsRequest extends InferType
class TransactionsController {
    -transactionsService: TransactionsService
    +findAll(params: GetTransactionsRequest): Promise<Transaction[]>
}
Wallet --> "1" User
Wallet --> "1" CurrencyType
Wallet --> "*" Transaction
Contact --> "1" User
User --> "*" Wallet
User --> "*" Tag
User --> "*" Contact
Tag --> "1" User
Tag --> "*" Transaction
Transaction --> "1" Contact
Transaction --> "*" Tag
AbstractNotificationStrategy --> "1" Notification
EmailNotificationStrategy --> "1" Notification
NotificationStrategyFactory --> "1" EmailNotificationStrategy
NotificationStrategyFactory --> "1" NotificationStrategy
NotificationStrategyFactory --> "1" AbstractNotificationStrategy
TransactionNotificationService --> "1" Wallet
TransactionNotificationService --> "1" NotificationStrategyFactory
TransactionNotificationService --> "1" Transaction
TransactionNotificationService --> "1" CurrencyType
AbstractGateway --> "1" Method
BlockchainComGateway --> "1" Transaction
BlockchainComGateway --> "*" Transaction
BlockchainComGateway --> "1" Out
TransactionsResponse --> "*" Tx
TransactionResponse --> "*" Input
TransactionResponse --> "*" Out
Tx --> "*" Input
Tx --> "*" Out
Input --> "1" Out
Out --> "*" SpendingOutpoint
TransactionWatcherService --> "1" Wallet
TransactionWatcherService --> "1" Transaction
TransactionWatcherService --> "1" BlockchainComGateway
TransactionWatcherService --> "1" TransactionNotificationService
WSTransaction --> "*" Input
WSTransaction --> "*" Out
WalletsService --> "1" Wallet
WalletsService --> "1" TransactionsService
WalletsService --> "1" BlockchainComGateway
WalletsService --> "1" TransactionWatcherService
WalletsService --> "1" CreateWalletRequest
WalletsService --> "1" WalletWithBalance
WalletsService --> "*" WalletWithBalance
WalletsService --> "1" DeleteWalletRequest
TransactionsService --> "1" Transaction
TransactionsService --> "1" BlockchainComGateway
TransactionsService --> "1" WalletsService
TransactionsService --> "1" Wallet
TransactionsService --> "*" Transaction
TransactionsController --> "1" TransactionsService
TransactionsController --> "1" GetTransactionsRequest
TransactionsController --> "*" Transaction
@enduml