@startuml
enum CurrencyType {
    ETHEREUM
    BITCOIN
}
interface CreateWalletRequest extends InferType
class Transaction {
    +id: number
    +transactionAddress: string
    +walletIn: string
    +walletOut: string
    +amount: string
    +createdAt: Date
    +tags: TransactionTag[]
}
class TransactionTag {
    +tagName: string
    +userId: number
    +user: User
    +transactions: Transaction[]
}
class User {
    +id: number
    +firstName: string
    +lastName: string
    +email: string
    +password: string
    +createdAt: Date
    +wallets: Wallet[]
    +tags: TransactionTag[]
}
class Wallet {
    +address: string
    +userId: number
    +name: string
    +user: User
    +currencyType: CurrencyType
    +transactions: Transaction[]
}
class AlchemyNodeServiceFacade {
    -alchemy: Alchemy
    -configService: ConfigService<Record<string, unknown>, false>
    +getBalance(address: string): Promise<string>
    +getTransactions(wallet: string): Promise<Transaction[]>
}
interface WalletWithBalance extends Wallet {
    +balance: string
}
class TransactionsService {
    -transactionsRepository: Repository<Transaction>
    -alchemyNodeServiceFacade: AlchemyNodeServiceFacade
    -walletsService: WalletsService
    +backfillTransactions(address: string): Promise<void>
    +handleAddressActivityEvent(addressActivityEvent: AddressActivityEvent): Promise<void>
    +findAll(userId: number): Promise<Transaction[]>
    +cleanup(address: string): Promise<Transaction[]>
}
abstract class AbstractGateway {
    -uri: string
    -fetch: any
    #request(method: Method, headers: Headers, path: string, body: any): Promise<T>
    #{abstract} handleError(response: any): Promise<void>
}
enum Method {
    POST
    GET
    PUT
    PATCH
    DELETE
}
class HttpError extends Error {
    +message: string
    +status: number
}
abstract class AbstractServiceGateway extends AbstractGateway {
    #handleError(response: any): Promise<void>
}
class AlchemyNodeGateway extends AbstractServiceGateway {
    -configService: ConfigService<Record<string, unknown>, false>
    +updateWebhookAddresses(addressesToAdd: string[], addressesToRemove: string[]): Promise<void>
}
interface DeleteWalletRequest extends InferType
class WalletsService {
    -walletRepository: Repository<Wallet>
    -alchemyNodeServiceFacade: AlchemyNodeServiceFacade
    -transactionsService: TransactionsService
    -alchemyNodeGateway: AlchemyNodeGateway
    +create(createWalletReq: CreateWalletRequest): Promise<WalletWithBalance>
    +findOne(address: string, userId: number): Promise<Wallet>
    +findAll(userId: number): Promise<WalletWithBalance[]>
    +delete(deleteWalletReq: DeleteWalletRequest): Promise<WalletWithBalance>
}
interface GetWalletsRequest extends InferType
class WalletsController {
    -walletsService: WalletsService
    +create(body: CreateWalletRequest): Promise<WalletWithBalance>
    +findAll(params: GetWalletsRequest): Promise<WalletWithBalance[]>
    +delete(params: DeleteWalletRequest): Promise<WalletWithBalance>
}
Transaction --> "*" TransactionTag
TransactionTag --> "1" User
TransactionTag --> "*" Transaction
User --> "*" Wallet
User --> "*" TransactionTag
Wallet --> "1" User
Wallet --> "1" CurrencyType
Wallet --> "*" Transaction
AlchemyNodeServiceFacade --> "*" Transaction
TransactionsService --> "1" Transaction
TransactionsService --> "1" AlchemyNodeServiceFacade
TransactionsService --> "1" WalletsService
TransactionsService --> "*" Transaction
AbstractGateway --> "1" Method
WalletsService --> "1" Wallet
WalletsService --> "1" AlchemyNodeServiceFacade
WalletsService --> "1" TransactionsService
WalletsService --> "1" AlchemyNodeGateway
WalletsService --> "1" CreateWalletRequest
WalletsService --> "1" WalletWithBalance
WalletsService --> "*" WalletWithBalance
WalletsService --> "1" DeleteWalletRequest
WalletsController --> "1" WalletsService
WalletsController --> "1" CreateWalletRequest
WalletsController --> "1" WalletWithBalance
WalletsController --> "1" GetWalletsRequest
WalletsController --> "*" WalletWithBalance
WalletsController --> "1" DeleteWalletRequest
@enduml