@startuml
title Add Wallet

actor User
participant Client
participant API
participant EthEdge
participant "Postgres DB"
participant "Alchemy Eth Node"

User -> Client: Submit add wallet
activate User
activate Client
Client -> API: POST /users/:id/wallets
activate API
API -> EthEdge: POST /users/:id/wallets
activate EthEdge
EthEdge -> "Postgres DB": insert wallet
activate "Postgres DB"

EthEdge -> "Alchemy Eth Node": getBalance(address)
activate "Alchemy Eth Node"
"Alchemy Eth Node" --> EthEdge: walletBalance

break when error inserting wallet or getting balance
    EthEdge --> API: error
    API --> Client: error
    Client --> User: Show error screen
end

EthEdge --> API: wallet
API --> Client: wallet
deactivate API
Client --> User: Show success screen
deactivate Client
deactivate User

par
    EthEdge -> "Alchemy Eth Node": getAssetTransfers
    "Alchemy Eth Node" --> EthEdge: transaction[]
    EthEdge ->> "Postgres DB": insert transactions
else
    EthEdge ->> "Alchemy Eth Node": updateWebhookAddresses(address)
    "Alchemy Eth Node" -> EthEdge: POST /transactions
    deactivate "Alchemy Eth Node"
    EthEdge -->> "Postgres DB": insert transaction
    deactivate "Postgres DB"
    deactivate EthEdge
end
@enduml
