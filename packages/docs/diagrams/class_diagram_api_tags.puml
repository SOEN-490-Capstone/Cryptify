@startuml
class JwtAuthGuard
class CanAccessResourceGuard implements CanActivate {
    +canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean>
}
interface GetTagsRequest extends InferType
interface CreateTagRequest extends InferType
interface UpdateTagRequest extends InferType
interface DeleteTagRequest extends InferType
enum CurrencyType {
    ETHEREUM
    BITCOIN
}
enum CurrencyTypeUILabels {
    ETHEREUM
    BITCOIN
}
interface WalletWithBalance extends Wallet {
    +balance: string
}
class Wallet {
    +address: string
    +userId: number
    +name: string
    +user?: User
    +currencyType: CurrencyType
    +transactions: Transaction[]
}
class WalletBuilder {
    -address: string
    -userId: number
    -name: string
    -user: User
    -transactions: Transaction[]
    -balance: string
    +setAddress(address: string): this
    +setUserId(userId: number): this
    +setName(name: string): this
    +setUser(user: User): this
    +setTransactions(transactions: Transaction[]): this
    +setWallet(wallet: Wallet): this
    +setBalance(balance: string): this
    +build(): WalletWithBalance
}
enum Role {
    BASIC
    PRO
}
class Filter {
    +name: string
    +userId: number
    +user?: User
    +currencyType: CurrencyType
    +txnIn: boolean
    +txnOut: boolean
    +range: string
    +tagNames: string[]
    +contactNames: string[]
}
class FilterBuilder {
    -name: string
    -userId: number
    -currencyType: CurrencyType
    -txnIn: boolean
    -txnOut: boolean
    -range: string
    -tagNames: string[]
    -contactNames: string[]
    +setName(name: string): this
    +setUserId(userId: number): this
    +setCurrencyType(type: CurrencyType): this
    +setTxns(txnIn: boolean, txnOut: boolean): this
    +setRange(range: string): this
    +setTagNames(names: string[]): this
    +setContactNames(names: string[]): this
    +build(): Filter
}
class User {
    +id: number
    +firstName: string
    +lastName: string
    +email: string
    +password: string
    +areNotificationsEnabled: boolean
    +role: Role
    +createdAt: Date
    +wallets?: Wallet[]
    +tags?: Tag[]
    +contacts?: Contact[]
    +filters?: Filter[]
}
class ContactAddress {
    +walletAddress: string
    +userId: number
    +user?: User
    +contacts?: Contact[]
}
class Contact {
    +contactName: string
    +userId: number
    +user?: User
    +addresses: ContactAddress[]
}
class ContactBuilder {
    -contactName: string
    -userId: number
    -addresses: string[]
    +setContactName(name: string): this
    +setUserId(userId: number): this
    +setAddresses(addresses: string[]): this
    +build(): Contact
}
class Transaction {
    +id: number
    +transactionAddress: string
    +walletIn: string
    +walletOut: string
    +amount: string
    +gasPrice?: string
    +gasLimit?: string
    +createdAt: Date
    +tags: Tag[]
    +contactIn?: Contact
    +contactOut?: Contact
}
class TransactionBuilder {
    -id: number
    -address: string
    -walletIn: string
    -walletOut: string
    -contactIn: Contact
    -contactOut: Contact
    -amount: string
    -gasPrice: string
    -gasLimit: string
    -createdAt: Date
    -tags: Tag[]
    +setId(id: number): this
    +setAddress(address: string): this
    +setWalletIn(address: string): this
    +setWalletOut(address: string): this
    +setContactIn(contact: Contact): this
    +setContactOut(contact: Contact): this
    +setAmount(amount: number): this
    +setGasPrice(price: string): this
    +setGasLimit(limit: string): this
    +setCreatedAt(timestamp: string): this
    +setTags(tags: Tag[]): this
    +setTransaction(transaction: Transaction): this
    +build(): Transaction
}
class Tag {
    +tagName: string
    +userId: number
    +user: User
    +transactions: Transaction[]
}
class TagsService {
    -tagRepository: Repository<Tag>
    -transactionRepository: Repository<Transaction>
    +findAll(userId: number): Promise<Tag[]>
    +create(req: CreateTagRequest): Promise<Tag>
    +update(updateTagNameRequest: UpdateTagRequest): Promise<Tag>
    +delete(deleteTagRequest: DeleteTagRequest): Promise<Tag>
}
class CanMutateResourceGuard implements CanActivate {
    +canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean>
}
class TagsController {
    -tagsService: TagsService
    +get(params: GetTagsRequest): Promise<Tag[]>
    +create(body: CreateTagRequest): Promise<Tag>
    +update(body: UpdateTagRequest): Promise<Tag>
    +delete(params: DeleteTagRequest): Promise<Tag>
}
Wallet --> "1" User
Wallet --> "1" CurrencyType
Wallet --> "*" Transaction
WalletBuilder --> "1" User
WalletBuilder --> "*" Transaction
WalletBuilder --> "1" Transaction
WalletBuilder --> "1" Wallet
WalletBuilder --> "1" WalletWithBalance
Filter --> "1" User
Filter --> "1" CurrencyType
FilterBuilder --> "1" CurrencyType
FilterBuilder --> "1" Filter
User --> "1" Role
User --> "*" Wallet
User --> "*" Tag
User --> "*" Contact
User --> "*" Filter
ContactAddress --> "1" User
ContactAddress --> "*" Contact
Contact --> "1" User
Contact --> "*" ContactAddress
ContactBuilder --> "1" Contact
Transaction --> "*" Tag
Transaction --> "1" Contact
TransactionBuilder --> "1" Contact
TransactionBuilder --> "*" Tag
TransactionBuilder --> "1" Tag
TransactionBuilder --> "1" Transaction
Tag --> "1" User
Tag --> "*" Transaction
TagsService --> "1" Tag
TagsService --> "1" Transaction
TagsService --> "*" Tag
TagsService --> "1" CreateTagRequest
TagsService --> "1" UpdateTagRequest
TagsService --> "1" DeleteTagRequest
TagsController --> "1" TagsService
TagsController --> "1" GetTagsRequest
TagsController --> "*" Tag
TagsController --> "1" CreateTagRequest
TagsController --> "1" Tag
TagsController --> "1" UpdateTagRequest
TagsController --> "1" DeleteTagRequest
@enduml