name: CI
on:
    push:
        branches: [ main ]
    pull_request:
        branches: [ main ]

jobs:
    client:
        name: Client
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Build image
              run: docker build -t cryptify-client -f packages/docker/client.Dockerfile --target development .
            - name: Lint and format
              run: docker run --entrypoint yarn cryptify-client lint:check
            - name: Unit test
              run: docker run --entrypoint yarn cryptify-client client:test:unit
    api:
        name: Api
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Build image
              run: docker build -t cryptify-api -f packages/docker/api.Dockerfile --target development .
            - name: Lint and format
              run: docker run --entrypoint yarn cryptify-api lint:check
            - name: Unit test
              run: docker run --entrypoint yarn cryptify-api workspace @cryptify/api test:unit
    eth-edge:
        name: EthEdge
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Build image
              run: docker build -t cryptify-eth-edge -f packages/docker/eth-edge.Dockerfile --target development .
            - name: Lint and format
              run: docker run --entrypoint yarn cryptify-eth-edge lint:check
            - name: Unit test
              run: docker run --entrypoint yarn cryptify-eth-edge workspace @cryptify/eth-edge test:unit
    btc-edge:
        name: BtcEdge
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Build image
              run: docker build -t cryptify-btc-edge -f packages/docker/btc-edge.Dockerfile --target development .
            - name: Lint and format
              run: docker run --entrypoint yarn cryptify-btc-edge lint:check
            - name: Unit test
              run: docker run --entrypoint yarn cryptify-btc-edge workspace @cryptify/btc-edge test:unit
    common:
        name: Common
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Build image
              run: docker build -t cryptify-api -f packages/docker/api.Dockerfile --target development .
            - name: Unit test
              run: docker run --entrypoint yarn cryptify-api workspace @cryptify/common test:unit
    integration-tests:
        name: Integration Tests
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Bring up containers
              run: sudo docker-compose up -d api && sudo docker-compose up -d eth-edge && sudo docker-compose up -d btc-edge && sudo docker-compose up -d test-db
            - name: Integration test api
              run: docker-compose exec -T api yarn run api:test
            - name: Integration test eth-edge
              run: docker-compose exec -T eth-edge yarn run eth-edge:test
            - name: Integration test btc-edge
              run: docker-compose exec -T btc-edge yarn run btc-edge:test
    system-tests:
        name: System Tests
        runs-on: macos-12
        env:
            DEVELOPER_DIR: /Applications/Xcode_14.0.1.app
        steps:
            - name: Checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 1
            - name: Use Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '16.x'
                  cache: 'npm'
            - name: Rebuild detox
              if: steps.cache.outputs.cache-hit == 'true'
              run: yarn detox clean-framework-cache && yarn detox build-framework-cache
            - name: Install Dependencies
              if: steps.cache.outputs.cache-hit != 'true'
              run: yarn install
            - name: Cache Pods
              uses: actions/cache@v1
              id: podcache
              with:
                  path: ios/Pods
                  key: pods-${{ hashFiles('**/Podfile.lock') }}
            - name: Update Pods
              run: |
                  gem update cocoapods xcodeproj
                  cd ./packages/client/ios && pod install && cd ../../..
            - run: brew tap wix/brew
            - run: brew install applesimutils
            - run: brew install xcbeautify
            - run: ./system-test ios build || true
