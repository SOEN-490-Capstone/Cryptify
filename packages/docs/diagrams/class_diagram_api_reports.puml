@startuml
class JwtAuthGuard
class CanMutateResourceGuard implements CanActivate {
    +canActivate(context: ExecutionContext): boolean | Promise<boolean> | Observable<boolean>
}
enum CurrencyType {
    ETHEREUM
    BITCOIN
}
enum FileType {
    CSV
}
interface CreateTransactionHistoryReportRequest extends InferType
abstract class AbstractGateway {
    -uri: string
    -fetch: any
    #request(method: Method, headers: Headers, path: string, body: any): Promise<T>
    #{abstract} handleError(response: any): Promise<void>
}
enum Method {
    POST
    GET
    PUT
    PATCH
    DELETE
}
class HttpError extends Error {
    +message: string
    +status: number
}
abstract class AbstractServiceGateway extends AbstractGateway {
    #handleError(response: any): Promise<void>
}
interface CreateWalletRequest extends InferType
class Contact {
    +walletAddress: string
    +userId: number
    +user: User
    +contactName: string
}
class Transaction {
    +id: number
    +transactionAddress: string
    +walletIn: string
    +contactIn: Contact
    +walletOut: string
    +contactOut: Contact
    +amount: string
    +createdAt: Date
    +tags: TransactionTag[]
}
class TransactionTag {
    +tagName: string
    +userId: number
    +user: User
    +transactions: Transaction[]
}
class User {
    +id: number
    +firstName: string
    +lastName: string
    +email: string
    +password: string
    +areNotificationsEnabled: boolean
    +createdAt: Date
    +wallets: Wallet[]
    +tags: TransactionTag[]
    +contacts: Contact[]
}
class Wallet {
    +address: string
    +userId: number
    +name: string
    +user: User
    +currencyType: CurrencyType
    +transactions: Transaction[]
}
interface WalletWithBalance extends Wallet {
    +balance: string
}
interface GetWalletsRequest extends InferType
interface GetTransactionsRequest extends InferType
interface DeleteWalletRequest extends InferType
abstract class AbstractEdgeGatewayStrategy extends AbstractServiceGateway {
    +{abstract} createWallet(req: CreateWalletRequest): Promise<WalletWithBalance>
    +{abstract} deleteWallet(req: DeleteWalletRequest): Promise<WalletWithBalance>
    +{abstract} getWallets(req: GetWalletsRequest): Promise<WalletWithBalance[]>
    +{abstract} getTransactions(req: GetTransactionsRequest): Promise<Transaction[]>
}
class EthEdgeGatewayStrategy extends AbstractEdgeGatewayStrategy {
    -configService: ConfigService<Record<string, unknown>, false>
    +createWallet(req: CreateWalletRequest): Promise<WalletWithBalance>
    +getWallets(req: GetWalletsRequest): Promise<WalletWithBalance[]>
    +getTransactions(req: GetTransactionsRequest): Promise<Transaction[]>
    +deleteWallet(req: DeleteWalletRequest): Promise<WalletWithBalance>
}
class BtcEdgeGatewayStrategy extends AbstractEdgeGatewayStrategy {
    -configService: ConfigService<Record<string, unknown>, false>
    +createWallet(req: CreateWalletRequest): Promise<WalletWithBalance>
    +getWallets(req: GetWalletsRequest): Promise<WalletWithBalance[]>
    +getTransactions(req: GetTransactionsRequest): Promise<Transaction[]>
    +deleteWallet(req: DeleteWalletRequest): Promise<WalletWithBalance>
}
class EdgeGatewayStrategyFactory {
    -ethEdgeGatewayStrategy: EthEdgeGatewayStrategy
    -btcEdgeGatewayStrategy: BtcEdgeGatewayStrategy
    +get(currencyType: CurrencyType): AbstractEdgeGatewayStrategy
}
interface CreateContactRequest extends InferType
class ContactsService {
    -contactRepository: Repository<Contact>
    +findAll(userId: number): Promise<Contact[]>
    +create(createContactRequest: CreateContactRequest): Promise<Contact[]>
}
abstract class AbstractNotificationStrategy {
    +{abstract} sendNotification(notification: Notification): Promise<void>
}
interface Notification {
    +to: string
    +title: string
    +body: string
    +attachment?: { filename: string; content: string; }
}
class EmailNotificationStrategy extends AbstractNotificationStrategy {
    -transporter: nodemailer.Transporter
    -from: string
    -configService: ConfigService<Record<string, unknown>, false>
    +sendNotification(notification: Notification): Promise<void>
}
class NotificationStrategyFactory {
    -emailNotificationStrategy: EmailNotificationStrategy
    +get(strategy: NotificationStrategy): AbstractNotificationStrategy
}
enum NotificationStrategy {
    EMAIL
    PUSH_NOTIFICATION
}
class ReportNotificationService {
    -usersRepository: Repository<User>
    -notificationStrategyFactory: NotificationStrategyFactory
    +sendReportNotification(userId: number, wallet: Wallet, fileName: string, csv: string): Promise<void>
}
class ReportsService {
    -edgeGatewayStrategyFactory: EdgeGatewayStrategyFactory
    -contactsService: ContactsService
    -reportNotificationService: ReportNotificationService
    +generateTransactionHistory(req: CreateTransactionHistoryReportRequest): Promise<void>
    -{static} BLANK_LINE: string
}
interface TransactionHistoryReportRow {
    +transactionId: string
    +status: string
    +from: string
    +to: string
    +transactionType: string
    +transactionDate: string
    +transactionTime: string
    +transactionAmount: string
    +transactionFee: string
}
class ReportsController {
    -reportsService: ReportsService
    +create(body: CreateTransactionHistoryReportRequest): Promise<{}>
}
AbstractGateway --> "1" Method
Contact --> "1" User
Transaction --> "1" Contact
Transaction --> "*" TransactionTag
TransactionTag --> "1" User
TransactionTag --> "*" Transaction
User --> "*" Wallet
User --> "*" TransactionTag
User --> "*" Contact
Wallet --> "1" User
Wallet --> "1" CurrencyType
Wallet --> "*" Transaction
AbstractEdgeGatewayStrategy --> "1" CreateWalletRequest
AbstractEdgeGatewayStrategy --> "1" WalletWithBalance
AbstractEdgeGatewayStrategy --> "1" DeleteWalletRequest
AbstractEdgeGatewayStrategy --> "1" GetWalletsRequest
AbstractEdgeGatewayStrategy --> "*" WalletWithBalance
AbstractEdgeGatewayStrategy --> "1" GetTransactionsRequest
AbstractEdgeGatewayStrategy --> "*" Transaction
EthEdgeGatewayStrategy --> "1" CreateWalletRequest
EthEdgeGatewayStrategy --> "1" WalletWithBalance
EthEdgeGatewayStrategy --> "1" GetWalletsRequest
EthEdgeGatewayStrategy --> "*" WalletWithBalance
EthEdgeGatewayStrategy --> "1" GetTransactionsRequest
EthEdgeGatewayStrategy --> "*" Transaction
EthEdgeGatewayStrategy --> "1" DeleteWalletRequest
BtcEdgeGatewayStrategy --> "1" CreateWalletRequest
BtcEdgeGatewayStrategy --> "1" WalletWithBalance
BtcEdgeGatewayStrategy --> "1" GetWalletsRequest
BtcEdgeGatewayStrategy --> "*" WalletWithBalance
BtcEdgeGatewayStrategy --> "1" GetTransactionsRequest
BtcEdgeGatewayStrategy --> "*" Transaction
BtcEdgeGatewayStrategy --> "1" DeleteWalletRequest
EdgeGatewayStrategyFactory --> "1" EthEdgeGatewayStrategy
EdgeGatewayStrategyFactory --> "1" BtcEdgeGatewayStrategy
EdgeGatewayStrategyFactory --> "1" CurrencyType
EdgeGatewayStrategyFactory --> "1" AbstractEdgeGatewayStrategy
ContactsService --> "1" Contact
ContactsService --> "*" Contact
ContactsService --> "1" CreateContactRequest
AbstractNotificationStrategy --> "1" Notification
EmailNotificationStrategy --> "1" Notification
NotificationStrategyFactory --> "1" EmailNotificationStrategy
NotificationStrategyFactory --> "1" NotificationStrategy
NotificationStrategyFactory --> "1" AbstractNotificationStrategy
ReportNotificationService --> "1" User
ReportNotificationService --> "1" NotificationStrategyFactory
ReportNotificationService --> "1" Wallet
ReportsService --> "1" EdgeGatewayStrategyFactory
ReportsService --> "1" ContactsService
ReportsService --> "1" ReportNotificationService
ReportsService --> "1" CreateTransactionHistoryReportRequest
ReportsController --> "1" ReportsService
ReportsController --> "1" CreateTransactionHistoryReportRequest
@enduml